// –ö–ª—é—á 2: NUxzekFtdnQ=

// –ü–æ–¥—Å–∫–∞–∑–∫–∞: 0L7RgtC60YDQvtC5IGluZGV4Lmh0bWwg0Lgg0LLQstC10LTQuCDQtNCy0LAg0L3QsNC50LTQtdC90L3Ri9GFINC60LvRjtGH0LA=

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64 —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
function decodeBase64(encodedStr) {
    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –≤ –±–∞–π—Ç—ã
        const binaryString = atob(encodedStr);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–∞–π—Ç—ã
        const bytes = new Uint8Array(binaryString.length);
        for (let i = 0; i < binaryString.length; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É UTF-8
        const decoded = new TextDecoder('utf-8').decode(bytes);
        return decoded;

    } catch (error) {
        throw new Error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
function decodeBase64Simple(encodedStr) {
    try {
        return decodeURIComponent(escape(atob(encodedStr)));
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π atob
        try {
            return atob(encodedStr);
        } catch (e) {
            throw new Error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ - –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
function decodeKeys() {
    const key1Input = document.getElementById('key1').value.trim();
    const key2Input = document.getElementById('key2').value.trim();
    const resultDiv = document.getElementById('keys-result');

    resultDiv.innerHTML = '';

    if (!key1Input || !key2Input) {
        resultDiv.innerHTML = '<div class="result-error">‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞!</div>';
        return;
    }

    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏ (–æ–Ω–∏ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å atob)
        const decodedKey1 = atob(key1Input);
        const decodedKey2 = atob(key2Input);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π
        const isKey1Correct = decodedKey1 === 'pastebin.com/raw/';
        const isKey2Correct = decodedKey2 === '5LszAmvt';

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let resultHTML = '<h4>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π:</h4>';
        resultHTML += `<p><strong>–ö–ª—é—á 1 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:</strong> "${decodedKey1}" ${isKey1Correct ? '‚úÖ' : '‚ùå'}</p>`;
        resultHTML += `<p><strong>–ö–ª—é—á 2 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:</strong> "${decodedKey2}" ${isKey2Correct ? '‚úÖ' : '‚ùå'}</p>`;

        // –°–æ–±–∏—Ä–∞–µ–º URL
        const assembledUrl = `https://${decodedKey1}${decodedKey2}`;
        resultHTML += `<p><strong>–°–æ–±—Ä–∞–Ω–Ω—ã–π URL:</strong></p>`;
        resultHTML += `<p><a href="${assembledUrl}" target="_blank" class="pastebin-link">${assembledUrl}</a></p>`;
        resultHTML += `<p><small>üí° –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</small></p>`;

        if (isKey1Correct && isKey2Correct) {
            resultHTML += '<div class="result-success">‚úÖ –ö–ª—é—á–∏ –≤–µ—Ä–Ω—ã–µ! URL —Å–æ–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</div>';
            resultHTML += '<p>üìù –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ, —Å–∫–æ–ø–∏—Ä—É–π –í–ï–°–¨ —Ç–µ–∫—Å—Ç (—ç—Ç–æ Base64) –∏ –≤—Å—Ç–∞–≤—å –≤ –ø–æ–ª–µ –Ω–∏–∂–µ.</p>';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
            document.getElementById('final-section').style.display = 'block';
        } else {
            resultHTML += '<div class="result-error">‚ùå –ö–ª—é—á–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ! –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª Base64 –∏–∑ —Ñ–∞–π–ª–æ–≤.</div>';
        }

        resultDiv.innerHTML = resultHTML;

    } catch (error) {
        resultDiv.innerHTML = `<div class="result-error">‚ùå ${error.message}</div>`;
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞ - –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function decodeFinalMessage() {
    const finalMessageInput = document.getElementById('finalMessage').value.trim();
    const resultDiv = document.getElementById('final-result');

    resultDiv.innerHTML = '';

    if (!finalMessageInput) {
        resultDiv.innerHTML = '<div class="result-error">‚ùå –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Base64!</div>';
        return;
    }

    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        const decodedMessage = decodeBase64(finalMessageInput);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        let resultHTML = '<h4>üéâ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ:</h4>';
        resultHTML += `<div class="result-success" style="padding: 15px;">`;
        resultHTML += `<pre style="white-space: pre-wrap; margin: 0; font-family: Arial, sans-serif;">${decodedMessage}</pre>`;
        resultHTML += `</div>`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞
        if (decodedMessage.includes('CTF{')) {
            const flagMatch = decodedMessage.match(/CTF\{[^}]+\}/);
            if (flagMatch) {
                resultHTML += `<div class="result-success" style="margin-top: 10px; padding: 15px;">`;
                resultHTML += `<h4>üèÅ –§–ª–∞–≥ –Ω–∞–π–¥–µ–Ω:</h4>`;
                resultHTML += `<p style="font-size: 18px; font-weight: bold; color: #155724;">${flagMatch[0]}</p>`;
                resultHTML += `</div>`;
            }
        }

        resultDiv.innerHTML = resultHTML;

        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è CI
        console.log('FINAL_DECODED_MESSAGE:', decodedMessage);

    } catch (error) {
        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
            const decodedMessage = decodeBase64Simple(finalMessageInput);

            let resultHTML = '<h4>üéâ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥):</h4>';
            resultHTML += `<div class="result-success" style="padding: 15px;">`;
            resultHTML += `<pre style="white-space: pre-wrap; margin: 0; font-family: Arial, sans-serif;">${decodedMessage}</pre>`;
            resultHTML += `</div>`;

            resultDiv.innerHTML = resultHTML;
            console.log('FINAL_DECODED_MESSAGE:', decodedMessage);

        } catch (secondError) {
            resultDiv.innerHTML = `<div class="result-error">‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}</div>`;
            console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }
}